1) Signals are interrupts delieverd by the operating system to terminate a program prematurely. They can be issues by the OS based on the system or error conditions.

2) SIGINT - (Signal Interrupt) is an interactive attention signal generated by the user, this temporarily suspends the pricess to handle the interrupt
   SIGTSTP - this signal is an interactive stop signal that can be handled and ignored. Your program should handle this signal if you have a special need to leave files or system tables in a secure state when a process is stopped. For example, programs that turn off echoing should handle SIGTSTP so they can turn echoing back on before stopping. This signal is generated when the user types the SUSP character (normally C-z). 
   SIGCONT - (Signal Continue) is sent to a process to make it continue. This signal always makes the process continue if it is stopped, before the signal is delivered. The default behavior is to do nothing else. You cannot block this signal. You can set a handler, but SIGCONT always makes the process continue regardless.
3) kill() function is called to kill a process using the SIGKILL signal and the PID given by the usre
   waitpid() function is called to wait for the process to change state and obtain information about the state
4) Linked-list is a set of dynamically allocated nodes, with each node containig a vlue and a pointer that stores the address of the next element. Queue works in FIFO order which stands for First In First Out. The First element to get pushed in is the First element that gets poped out when requested.
  Common operations:
  Inserting element at the head of the list
  Inserting element at the end of the list
  Inserting elemeny at specific position in list
  Deleting nodes from list
  Iterating through the list
5) //creating linked list that include the value and pointer to the next element
typedef struct node
{
	int value;
	struct node * next;
}nodes;

//adding values to the list
public void add(nodes* head, int value)
{
	nodes* current = head;
	while(current->next!=NULL)
	{
		current = current->next;
	}
	current->next = malloc(sizeof(nodes));
	current->next->value = value;
	current->next->next = NULL;
}

//removing elements from a specific location k in the list

public void remove(nodes* head, int k)
{
  int n = sizeof(nodes);
    
  if (k > n || isEmpty()) throw new NoSuchElementException("Cannot delete element at this position");
  Node previous = head;
  int deleteIndex = 1;

  if(k == deleteIndex)
  {     
    if(head.next == null)
	  {
    	last = null;
    	head = head.next;
    	n--;
	  }
  }

}
